@import url("https://fonts.googleapis.com/css2?family=Barlow+Semi+Condensed:wght@500;600&display=swap");

$font-family: "Barlow Semi Condensed", sans-serif;

// colors

$primary-color: #047aed;
$secondary-color: #1c3fa8;
$dark-color: #002240;
$light-color: #f4f4f4;
$success-color: #5cb85c;
$error-color: #d9534f;

$moderat-violet: hsl(263, 55%, 52%);

$very-dark-grayish-blue: hsl(217, 19%, 35%);
$very-dark-blackish-blue: hsl(219, 29%, 14%);
$light-gray: hsl(0, 0%, 81%);
$light-grayish-blue: hsl(210, 46%, 95%);

$white: hsl(0, 0%, 100%);

// Reset

*,
*:before,
*:after {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

html {
	font-size: 62.5%; // 1rem = 10px
}

body {
	font-size: 1.2rem;
	font-family: $font-family;
	color: $very-dark-blackish-blue;
	background-color: $light-grayish-blue;
	line-height: 1.6;
	/* 	background-image: linear-gradient($gradientViolet, $gradientBlue);
	background-repeat: no-repeat;
	background-attachment: fixed;
	color: $very-dark-grayish-blue; */
}

ul {
	list-style: none;
}

a {
	text-decoration: none;
	color: #333;
}

h1,
h2 {
	font-weight: 300;
	line-height: 1.2;
	margin: 10px 0;
}

p {
	margin: 10px 0;
}

img {
	width: 100%;
}

$breakpoints-up: (
	"md": "750px",
	"ld": "1024px",
	"xd": "1376px",
);

$breakpoints-down: (
	"md": "750px",
	"ld": "1024px",
	"xd": "1376px",
);

@mixin breakpoint-up($size) {
	@media screen and (min-width: map-get($breakpoints-up, $size)) {
		@content;
	}
}
@mixin breakpoint-down($size) {
	@media screen and (max-width: map-get($breakpoints-down, $size)) {
		@content;
	}
}

@function calculateRem($size) {
	$remSize: $size / 16px;
	@return #{$remSize}rem;
}

// 640px, 1024px, 1400px
$breakpoints-up: (
	/* 	"medium": "40em",
	"large": "64em",
	"xlarge": "87.5em", */ "medium": "640px",
	"large": "1024px",
	"xlarge": "1400px"
);

// 639px, 1023px, 1399px
$breakpoints-down: (
	/* 	"small": "39.9375em",
	"medium": "63.9375em",
	"large": "87.4375em", */
		"small": "639px",
	"medium": "1023px",
	"large": "1399px"
);

@mixin breakpoint-up($size) {
	@media (min-width: map-get($breakpoints-up, $size)) {
		@content;
	}
}

@mixin breakpoint-down($size) {
	@media (max-width: map-get($breakpoints-down, $size)) {
		@content;
	}
}

// Visibility
.hide-for-mobile {
	@include breakpoint-down(small) {
		display: none;
	}
}

.hide-for-desktop {
	@include breakpoint-up(medium) {
		display: none;
	}
}

/* Utilities */
.container {
	max-width: 1100px;
	margin: 0 auto;
	overflow: auto;
	padding: 0 40px;
}

.card {
	background-color: #fff;
	color: #333;
	border-radius: 10px;
	box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
	padding: 20px;
	margin: 10px;

	&__one {
		grid-area: card-one;
	}
	&__two {
		grid-area: card-two;
	}
	&__three {
		grid-area: card-three;
	}
	&__four {
		grid-area: card-four;
	}
	&__five {
		grid-area: card-five;
	}

	&__description {
		opacity: 0.7;
	}

	&--violet {
		background: $moderat-violet url(../images/bg-pattern-quotation.svg)
			no-repeat 90% top;
	}

	&--grayish-blue {
		background-color: $very-dark-grayish-blue;
	}
	&--blackish-blue {
		background-color: $very-dark-blackish-blue;
	}

	&--white {
		background-color: $white;
	}

	&__customer {
		display: grid;
		grid-template-columns: 4rem 1fr;
		gap: 20px;

		p {
			margin: 2.5px 0;
		}
	}

	&__image {
		width: 3rem;
		height: 3rem;

		img {
			border-radius: 50%;
		}
	}
}

.btn {
	display: inline-block;
	padding: 10px 30px;
	cursor: pointer;
	background-color: $primary-color;
	color: #fff;
	border: none;
	border-radius: 5px;

	&-outline {
		background-color: transparent;
		border: 1px solid #fff;
	}

	&:hover {
		transform: scale(0.98);
	}
}

/* Backgounds & colored buttons */
.bg-primary,
.btn-primary {
	background-color: $primary-color;
	color: #fff;
}

.bg-secondary,
.btn-secondary {
	background-color: $secondary-color;
	color: #fff;
}

.bg-dark,
.btn-dark {
	background-color: $dark-color;
	color: #fff;
}

.bg-light,
.btn-light {
	background-color: $light-color;
	color: #333;
}

.bg-primary,
.btn-primary,
.bg-secondary,
.btn-secondary,
.bg-dark,
.btn-dark {
	a {
		color: #fff;
	}
}

/* Text colors */
.text-primary {
	color: $primary-color;
}

.text-secondary {
	color: $secondary-color;
}

.text-dark {
	color: $dark-color;
}

.text-light {
	color: $white;
}

.text-light-gray {
	color: $light-gray;
}

.text-light-blue {
	color: $light-grayish-blue;
}

text-dark-grayish {
	color: $very-dark-grayish-blue;
}
text-dark-blackish {
	color: $very-dark-blackish-blue;
}

/* Text sizes */
.lead {
	font-size: 20px;
}

.sm {
	font-size: 1rem;
}

.lead {
	font-size: 2rem;
}

.lg {
	font-size: 3rem;
}

.xl {
	font-size: 4rem;
}

.text-center {
	text-align: center;
}

/* Alert */
.alert {
	background-color: $light-color;
	padding: 10px 20px;
	font-weight: bold;
	margin: 15px 0;

	i {
		margin-right: 10px;
	}

	&-success {
		background-color: $success-color;
		color: #fff;
	}
	&-error {
		background-color: $error-color;
		color: #fff;
	}
}

.flex {
	display: flex;
	justify-content: center;
	align-items: center;
	height: 100%;
}

.grid {
	display: grid;
	grid-template-columns: repeat(2, 1fr);
	gap: 20px;
	justify-content: center;
	align-items: center;
	height: 100%;

	margin-bottom: 2rem;

	margin-top: 7.1rem;
	/* 	margin-bottom: 7.1rem; */

	grid-template-columns: 32.7rem;
	/* 	grid-template-rows: 44.4rem 24rem 22.2rem 38.4rem 43.8rem; */
	grid-template-areas:
		"card-one"
		"card-two"
		"card-four"
		"card-five"
		"card-three";
	/* 	grid-row-gap: 2.4rem; */
	grid-row-gap: 0rem;
	justify-content: center;
	align-content: center;
	letter-spacing: 0.03px;

	@include breakpoint-up(medium) {
		display: grid;
		grid-template-columns: repeat(2, 255px);
		grid-template-rows: 28.2rem 26.6rem 28.2rem 26.6rem;
		grid-template-areas:
			"card-one card-one"
			"card-two card-three"
			"card-four card-four"
			"card-five card-five";
		grid-column-gap: 3rem;
		grid-row-gap: 2.4rem;
		justify-content: center;
		align-content: center;
		letter-spacing: 0.03px;
	}

	@include breakpoint-up(large) {
		/* 		width: 144rem;
		height: 90rem; */
		display: grid;
		grid-template-columns: repeat(4, 255px);
		grid-template-rows: 28.2rem 26.6rem;
		/* 		grid-template-areas: */
		/* 			"card-one card-one card-two" */
		/* 			"card-four card-five card-five" */
		/* 			"card-three card-three card-three"; */

		/* 			    grid-template-areas:
        "card-one card-one card-two card-three"
        "card-four card-five card-five card-three" */
		grid-template-areas:
			"card-one card-one card-two card-five"
			"card-three card-four card-four card-five";
		grid-column-gap: 3rem;
		grid-row-gap: 2.4rem;
		justify-content: center;
		align-content: center;
		letter-spacing: 0.03px;
	}

	/* 	display: grid;
	grid-template-columns: repeat(4, 255px);
	grid-template-rows: 28.2rem 26.6rem;
	grid-template-areas:
		"card-one card-one card-two card-three"
		"card-four card-five card-five card-five";
	grid-column-gap: 3rem;
	grid-row-gap: 2.4rem;
	justify-content: center;
	align-content: center;
	letter-spacing: 0.03px; */

	&-3 {
		grid-template-columns: repeat(3, 1fr);
	}
}

// Mixins
$max: 20;
$offset: 1;
$unit: "rem";

@mixin generate-styling($className, $styleName) {
	$i: 0;
	@while $i <= $max {
		#{$className + $i} {
			#{$styleName}: #{$i + $unit};
		}
		$i: $i + $offset;
	}
}

// Flexbox mixins
@mixin flexbox {
	display: flex;
}

@mixin inline-flex {
	display: inline-flex;
}

// flex shorthand
// applites to: flex items
// positive number, intial, auto or none
@mixin flex($fg: 1, $fs: 0, $fb: auto) {
	// set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so lets grab the
	// first item in the list and just return that.
	@if type-of($fg) == "list" {
		$fg-boxflex: nth($fg, 1);
	}

	flex: $fg $fs $fb;
}

// Flex direction
// row (default) | row-reverse | column | column-reverse
@mixin flex-direction($direction: row) {
	flex-direction: $direction;
}

// Margins
@include generate-styling(".m-t-", "margin-top");
@include generate-styling(".m-r-", "margin-right");
@include generate-styling(".m-b-", "margin-bottom");
@include generate-styling(".m-l-", "margin-left");
@include generate-styling(".m-x-", "margin");
// Paddings
@include generate-styling(".p-t-", "padding-top");
@include generate-styling(".p-r-", "padding-right");
@include generate-styling(".p-b-", "padding-bottom");
@include generate-styling(".p-l-", "padding-left");
@include generate-styling(".p-x-", "padding");

/* Margin */
.my {
	&-1 {
		margin: 1rem 0;
	}
	&-2 {
		margin: 1.5rem 0;
	}
	&-3 {
		margin: 2rem 0;
	}
	&-4 {
		margin: 3rem 0;
	}
	&-5 {
		margin: 4rem 0;
	}
}

.m {
	&-1 {
		margin: 1rem;
	}
	&-2 {
		margin: 1.5rem;
	}
	&-3 {
		margin: 2rem;
	}
	&-4 {
		margin: 3rem;
	}
	&-5 {
		margin: 4rem;
	}
}

/* Padding */
.py {
	&-1 {
		padding: 1rem 0;
	}
	&-2 {
		padding: 1.5rem 0;
	}
	&-3 {
		padding: 2rem 0;
	}
	&-4 {
		padding: 3rem 0;
	}
	&-5 {
		padding: 4rem 0;
	}
}

.p {
	&-1 {
		padding: 1rem;
	}
	&-2 {
		padding: 1.5rem;
	}
	&-3 {
		padding: 2rem;
	}
	&-4 {
		padding: 3rem;
	}
	&-5 {
		padding: 4rem;
	}
}
